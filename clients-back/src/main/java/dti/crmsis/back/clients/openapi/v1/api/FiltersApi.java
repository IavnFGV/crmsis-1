package dti.crmsis.back.clients.openapi.v1.api;

import java.util.List;
import java.util.Map;


import dti.crmsis.back.clients.openapi.v1.model.AddFilterRequest;
import dti.crmsis.back.clients.openapi.v1.model.AddFiltersResponse;
import dti.crmsis.back.clients.openapi.v1.model.DeleteFilterResponse;
import dti.crmsis.back.clients.openapi.v1.model.DeleteFiltersResponse;
import dti.crmsis.back.clients.openapi.v1.model.GetFiltersResponse;
import dti.crmsis.back.clients.openapi.v1.model.GetFiltersResponse1;
import dti.crmsis.back.clients.openapi.v1.model.UpdateFilterRequest;
/**
  * Pipedrive API v1
  * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p>
  */
@jakarta.ws.rs.Path("/filters")
@io.quarkiverse.openapi.generator.annotations.GeneratedClass(value="openapi.yaml", tag = "Filters")
@jakarta.enterprise.context.ApplicationScoped
public interface FiltersApi {

     /**
     * Add a new filter
     *
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with 'AND', and only two second level condition groups are supported of which one must be glued with 'AND' and the second with 'OR'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     *
     * @param addFilterRequest 
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="addFilter", method="POST", path="/v1/filters")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="addFilter", method="POST", path="/v1/filters")
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Consumes({"application/json"})
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("addFilter")
    public AddFiltersResponse addFilter(
        AddFilterRequest addFilterRequest
    );

     /**
     * Delete a filter
     *
     * Marks a filter as deleted.
     *
     * @param id The ID of the filter
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="deleteFilter", method="DELETE", path="/v1/filters/{id}")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="deleteFilter", method="DELETE", path="/v1/filters/{id}")
    @jakarta.ws.rs.DELETE
    @jakarta.ws.rs.Path("/{id}")
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("deleteFilter")
    public DeleteFilterResponse deleteFilter(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("id") @jakarta.ws.rs.PathParam("id")Integer id
    );

     /**
     * Delete multiple filters in bulk
     *
     * Marks multiple filters as deleted.
     *
     * @param ids The comma-separated filter IDs to delete
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="deleteFilters", method="DELETE", path="/v1/filters")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="deleteFilters", method="DELETE", path="/v1/filters")
    @jakarta.ws.rs.DELETE
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("deleteFilters")
    public DeleteFiltersResponse deleteFilters(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("ids") @jakarta.ws.rs.QueryParam("ids") String ids
    );

     /**
     * Get one filter
     *
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     *
     * @param id The ID of the filter
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="getFilter", method="GET", path="/v1/filters/{id}")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="getFilter", method="GET", path="/v1/filters/{id}")
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Path("/{id}")
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("getFilter")
    public GetFiltersResponse1 getFilter(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("id") @jakarta.ws.rs.PathParam("id")Integer id
    );

     /**
     * Get all filter helpers
     *
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     *
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="getFilterHelpers", method="GET", path="/v1/filters/helpers")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="getFilterHelpers", method="GET", path="/v1/filters/helpers")
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Path("/helpers")
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("getFilterHelpers")
    public Object getFilterHelpers(
    );

     /**
     * Get all filters
     *
     * Returns data about all filters.
     *
     * @param type The types of filters to fetch
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="getFilters", method="GET", path="/v1/filters")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="getFilters", method="GET", path="/v1/filters")
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("getFilters")
    public GetFiltersResponse getFilters(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("type") @jakarta.ws.rs.QueryParam("type") String type
    );

     /**
     * Update filter
     *
     * Updates an existing filter.
     *
     * @param id The ID of the filter
     * @param updateFilterRequest 
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="updateFilter", method="PUT", path="/v1/filters/{id}")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="updateFilter", method="PUT", path="/v1/filters/{id}")
    @jakarta.ws.rs.PUT
    @jakarta.ws.rs.Path("/{id}")
    @jakarta.ws.rs.Consumes({"application/json"})
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("updateFilter")
    public AddFiltersResponse updateFilter(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("id") @jakarta.ws.rs.PathParam("id")Integer id, 
        UpdateFilterRequest updateFilterRequest
    );

}