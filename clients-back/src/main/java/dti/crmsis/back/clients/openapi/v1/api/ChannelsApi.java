package dti.crmsis.back.clients.openapi.v1.api;

import java.util.List;
import java.util.Map;


import dti.crmsis.back.clients.openapi.v1.model.AddChannelBadRequestResponse;
import dti.crmsis.back.clients.openapi.v1.model.AddChannelForbiddenErrorResponse;
import dti.crmsis.back.clients.openapi.v1.model.AddChannelRequest;
import dti.crmsis.back.clients.openapi.v1.model.AddChannelResponse;
import dti.crmsis.back.clients.openapi.v1.model.DeleteChannel200Response;
import dti.crmsis.back.clients.openapi.v1.model.DeleteConversationForbiddenErrorResponse;
import dti.crmsis.back.clients.openapi.v1.model.DeleteConversationNotFoundErrorResponse;
import dti.crmsis.back.clients.openapi.v1.model.GetReceiveMessageSuccessResponse;
import dti.crmsis.back.clients.openapi.v1.model.ReceiveMessageBadRequestErrorResponse;
import dti.crmsis.back.clients.openapi.v1.model.ReceiveMessageRequest;
/**
  * Pipedrive API v1
  * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p>
  */
@jakarta.ws.rs.Path("/channels")
@io.quarkiverse.openapi.generator.annotations.GeneratedClass(value="openapi.yaml", tag = "Channels")
@jakarta.enterprise.context.ApplicationScoped
public interface ChannelsApi {

     /**
     * Add a channel
     *
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     *
     * @param addChannelRequest 
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="addChannel", method="POST", path="/v1/channels")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="addChannel", method="POST", path="/v1/channels")
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Consumes({"application/json"})
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("addChannel")
    public AddChannelResponse addChannel(
        AddChannelRequest addChannelRequest
    );

     /**
     * Delete a channel
     *
     * Deletes an existing messengerâ€™s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     *
     * @param id The ID of the channel provided by the integration
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="deleteChannel", method="DELETE", path="/v1/channels/{id}")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="deleteChannel", method="DELETE", path="/v1/channels/{id}")
    @jakarta.ws.rs.DELETE
    @jakarta.ws.rs.Path("/{id}")
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("deleteChannel")
    public DeleteChannel200Response deleteChannel(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("id") @jakarta.ws.rs.PathParam("id")String id
    );

     /**
     * Delete a conversation
     *
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     *
     * @param channelId The ID of the channel provided by the integration
     * @param conversationId The ID of the conversation provided by the integration
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="deleteConversation", method="DELETE", path="/v1/channels/{channel-id}/conversations/{conversation-id}")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="deleteConversation", method="DELETE", path="/v1/channels/{channel-id}/conversations/{conversation-id}")
    @jakarta.ws.rs.DELETE
    @jakarta.ws.rs.Path("/{channel-id}/conversations/{conversation-id}")
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("deleteConversation")
    public DeleteChannel200Response deleteConversation(
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("channel-id") @jakarta.ws.rs.PathParam("channel-id")String channelId, 
        @io.quarkiverse.openapi.generator.annotations.GeneratedParam("conversation-id") @jakarta.ws.rs.PathParam("conversation-id")String conversationId
    );

     /**
     * Receives an incoming message
     *
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     *
     * @param receiveMessageRequest 
     */
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="api_key", openApiSpecId="openapi_yaml", operationId="receiveMessage", method="POST", path="/v1/channels/messages/receive")
    @io.quarkiverse.openapi.generator.markers.OperationMarker(name="oauth2", openApiSpecId="openapi_yaml", operationId="receiveMessage", method="POST", path="/v1/channels/messages/receive")
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Path("/messages/receive")
    @jakarta.ws.rs.Consumes({"application/json"})
    @jakarta.ws.rs.Produces({"application/json"})
    @io.quarkiverse.openapi.generator.annotations.GeneratedMethod("receiveMessage")
    public GetReceiveMessageSuccessResponse receiveMessage(
        ReceiveMessageRequest receiveMessageRequest
    );

}