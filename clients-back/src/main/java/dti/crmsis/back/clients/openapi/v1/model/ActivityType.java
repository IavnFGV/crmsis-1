package dti.crmsis.back.clients.openapi.v1.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import com.fasterxml.jackson.annotation.JsonProperty;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ActivityType  {

    /**
      * The ID of the activity type
     **/
    private Integer id;
    /**
      * The name of the activity type
     **/
    private String name;

    public enum IconKeyEnum {
        TASK(String.valueOf("task")), EMAIL(String.valueOf("email")), MEETING(String.valueOf("meeting")), DEADLINE(String.valueOf("deadline")), CALL(String.valueOf("call")), LUNCH(String.valueOf("lunch")), CALENDAR(String.valueOf("calendar")), DOWNARROW(String.valueOf("downarrow")), DOCUMENT(String.valueOf("document")), SMARTPHONE(String.valueOf("smartphone")), CAMERA(String.valueOf("camera")), SCISSORS(String.valueOf("scissors")), COGS(String.valueOf("cogs")), BUBBLE(String.valueOf("bubble")), UPARROW(String.valueOf("uparrow")), CHECKBOX(String.valueOf("checkbox")), SIGNPOST(String.valueOf("signpost")), SHUFFLE(String.valueOf("shuffle")), ADDRESSBOOK(String.valueOf("addressbook")), LINEGRAPH(String.valueOf("linegraph")), PICTURE(String.valueOf("picture")), CAR(String.valueOf("car")), WORLD(String.valueOf("world")), SEARCH(String.valueOf("search")), CLIP(String.valueOf("clip")), SOUND(String.valueOf("sound")), BRUSH(String.valueOf("brush")), KEY(String.valueOf("key")), PADLOCK(String.valueOf("padlock")), PRICETAG(String.valueOf("pricetag")), SUITCASE(String.valueOf("suitcase")), FINISH(String.valueOf("finish")), PLANE(String.valueOf("plane")), LOOP(String.valueOf("loop")), WIFI(String.valueOf("wifi")), TRUCK(String.valueOf("truck")), CART(String.valueOf("cart")), BULB(String.valueOf("bulb")), BELL(String.valueOf("bell")), PRESENTATION(String.valueOf("presentation"));

        // caching enum access
        private static final java.util.EnumSet<IconKeyEnum> values = java.util.EnumSet.allOf(IconKeyEnum.class);

        String value;

        IconKeyEnum (String v) {
            value = v;
        }

        @JsonValue
        public String value() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static IconKeyEnum fromString(String v) {
            for (IconKeyEnum b : values) {
                if (String.valueOf(b.value).equalsIgnoreCase(v)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + v + "'");
        }
    }
    /**
      * Icon graphic to use for representing this activity type
     **/
    private IconKeyEnum iconKey;
    /**
      * A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
     **/
    private String color;
    /**
      * An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
     **/
    private Integer orderNr;
    /**
      * A string that is generated by the API based on the given name of the activity type upon creation
     **/
    private String keyString;
    /**
      * The active flag of the activity type
     **/
    private Boolean activeFlag;
    /**
      * Whether the activity type is a custom one or not
     **/
    private Boolean isCustomFlag;
    /**
      * The creation time of the activity type
     **/
    private OffsetDateTime addTime;
    /**
      * The update time of the activity type
     **/
    private OffsetDateTime updateTime;

    /**
    * The ID of the activity type
    * @return id
    **/
    @JsonProperty("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Set id
     **/
    public void setId(Integer id) {
        this.id = id;
    }

    public ActivityType id(Integer id) {
        this.id = id;
        return this;
    }

    /**
    * The name of the activity type
    * @return name
    **/
    @JsonProperty("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Set name
     **/
    public void setName(String name) {
        this.name = name;
    }

    public ActivityType name(String name) {
        this.name = name;
        return this;
    }

    /**
    * Icon graphic to use for representing this activity type
    * @return iconKey
    **/
    @JsonProperty("icon_key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IconKeyEnum getIconKey() {
        return iconKey;
    }

    /**
     * Set iconKey
     **/
    public void setIconKey(IconKeyEnum iconKey) {
        this.iconKey = iconKey;
    }

    public ActivityType iconKey(IconKeyEnum iconKey) {
        this.iconKey = iconKey;
        return this;
    }

    /**
    * A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
    * @return color
    **/
    @JsonProperty("color")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getColor() {
        return color;
    }

    /**
     * Set color
     **/
    public void setColor(String color) {
        this.color = color;
    }

    public ActivityType color(String color) {
        this.color = color;
        return this;
    }

    /**
    * An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
    * @return orderNr
    **/
    @JsonProperty("order_nr")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOrderNr() {
        return orderNr;
    }

    /**
     * Set orderNr
     **/
    public void setOrderNr(Integer orderNr) {
        this.orderNr = orderNr;
    }

    public ActivityType orderNr(Integer orderNr) {
        this.orderNr = orderNr;
        return this;
    }

    /**
    * A string that is generated by the API based on the given name of the activity type upon creation
    * @return keyString
    **/
    @JsonProperty("key_string")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getKeyString() {
        return keyString;
    }

    /**
     * Set keyString
     **/
    public void setKeyString(String keyString) {
        this.keyString = keyString;
    }

    public ActivityType keyString(String keyString) {
        this.keyString = keyString;
        return this;
    }

    /**
    * The active flag of the activity type
    * @return activeFlag
    **/
    @JsonProperty("active_flag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getActiveFlag() {
        return activeFlag;
    }

    /**
     * Set activeFlag
     **/
    public void setActiveFlag(Boolean activeFlag) {
        this.activeFlag = activeFlag;
    }

    public ActivityType activeFlag(Boolean activeFlag) {
        this.activeFlag = activeFlag;
        return this;
    }

    /**
    * Whether the activity type is a custom one or not
    * @return isCustomFlag
    **/
    @JsonProperty("is_custom_flag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsCustomFlag() {
        return isCustomFlag;
    }

    /**
     * Set isCustomFlag
     **/
    public void setIsCustomFlag(Boolean isCustomFlag) {
        this.isCustomFlag = isCustomFlag;
    }

    public ActivityType isCustomFlag(Boolean isCustomFlag) {
        this.isCustomFlag = isCustomFlag;
        return this;
    }

    /**
    * The creation time of the activity type
    * @return addTime
    **/
    @JsonProperty("add_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OffsetDateTime getAddTime() {
        return addTime;
    }

    /**
     * Set addTime
     **/
    public void setAddTime(OffsetDateTime addTime) {
        this.addTime = addTime;
    }

    public ActivityType addTime(OffsetDateTime addTime) {
        this.addTime = addTime;
        return this;
    }

    /**
    * The update time of the activity type
    * @return updateTime
    **/
    @JsonProperty("update_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OffsetDateTime getUpdateTime() {
        return updateTime;
    }

    /**
     * Set updateTime
     **/
    public void setUpdateTime(OffsetDateTime updateTime) {
        this.updateTime = updateTime;
    }

    public ActivityType updateTime(OffsetDateTime updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Create a string representation of this pojo.
     **/
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ActivityType {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    iconKey: ").append(toIndentedString(iconKey)).append("\n");
        sb.append("    color: ").append(toIndentedString(color)).append("\n");
        sb.append("    orderNr: ").append(toIndentedString(orderNr)).append("\n");
        sb.append("    keyString: ").append(toIndentedString(keyString)).append("\n");
        sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
        sb.append("    isCustomFlag: ").append(toIndentedString(isCustomFlag)).append("\n");
        sb.append("    addTime: ").append(toIndentedString(addTime)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        
        sb.append("}");
        return sb.toString();
    }

    /**
     * Compares this object to the specified object. The result is
     * {@code true} if and only if the argument is not
     * {@code null} and is a {@code ActivityType} object that
     * contains the same values as this object.
     *
     * @param   obj   the object to compare with.
     * @return  {@code true} if the objects are the same;
     *          {@code false} otherwise.
     **/
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;

        ActivityType model = (ActivityType) obj;

        return java.util.Objects.equals(id, model.id) &&
        java.util.Objects.equals(name, model.name) &&
        java.util.Objects.equals(iconKey, model.iconKey) &&
        java.util.Objects.equals(color, model.color) &&
        java.util.Objects.equals(orderNr, model.orderNr) &&
        java.util.Objects.equals(keyString, model.keyString) &&
        java.util.Objects.equals(activeFlag, model.activeFlag) &&
        java.util.Objects.equals(isCustomFlag, model.isCustomFlag) &&
        java.util.Objects.equals(addTime, model.addTime) &&
        java.util.Objects.equals(updateTime, model.updateTime);
    }

    /**
     * Returns a hash code for a {@code ActivityType}.
     *
     * @return a hash code value for a {@code ActivityType}.
     **/
    @Override
    public int hashCode() {
        return java.util.Objects.hash(id,
        name,
        iconKey,
        color,
        orderNr,
        keyString,
        activeFlag,
        isCustomFlag,
        addTime,
        updateTime);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class ActivityTypeQueryParam  {

        @jakarta.ws.rs.QueryParam("id")
        private Integer id;
        @jakarta.ws.rs.QueryParam("name")
        private String name;

    public enum IconKeyEnum {
        TASK(String.valueOf("task")), EMAIL(String.valueOf("email")), MEETING(String.valueOf("meeting")), DEADLINE(String.valueOf("deadline")), CALL(String.valueOf("call")), LUNCH(String.valueOf("lunch")), CALENDAR(String.valueOf("calendar")), DOWNARROW(String.valueOf("downarrow")), DOCUMENT(String.valueOf("document")), SMARTPHONE(String.valueOf("smartphone")), CAMERA(String.valueOf("camera")), SCISSORS(String.valueOf("scissors")), COGS(String.valueOf("cogs")), BUBBLE(String.valueOf("bubble")), UPARROW(String.valueOf("uparrow")), CHECKBOX(String.valueOf("checkbox")), SIGNPOST(String.valueOf("signpost")), SHUFFLE(String.valueOf("shuffle")), ADDRESSBOOK(String.valueOf("addressbook")), LINEGRAPH(String.valueOf("linegraph")), PICTURE(String.valueOf("picture")), CAR(String.valueOf("car")), WORLD(String.valueOf("world")), SEARCH(String.valueOf("search")), CLIP(String.valueOf("clip")), SOUND(String.valueOf("sound")), BRUSH(String.valueOf("brush")), KEY(String.valueOf("key")), PADLOCK(String.valueOf("padlock")), PRICETAG(String.valueOf("pricetag")), SUITCASE(String.valueOf("suitcase")), FINISH(String.valueOf("finish")), PLANE(String.valueOf("plane")), LOOP(String.valueOf("loop")), WIFI(String.valueOf("wifi")), TRUCK(String.valueOf("truck")), CART(String.valueOf("cart")), BULB(String.valueOf("bulb")), BELL(String.valueOf("bell")), PRESENTATION(String.valueOf("presentation"));

        // caching enum access
        private static final java.util.EnumSet<IconKeyEnum> values = java.util.EnumSet.allOf(IconKeyEnum.class);

        String value;

        IconKeyEnum (String v) {
            value = v;
        }

        @JsonValue
        public String value() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static IconKeyEnum fromString(String v) {
            for (IconKeyEnum b : values) {
                if (String.valueOf(b.value).equalsIgnoreCase(v)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + v + "'");
        }
    }
        private IconKeyEnum iconKey;
        @jakarta.ws.rs.QueryParam("color")
        private String color;
        @jakarta.ws.rs.QueryParam("orderNr")
        private Integer orderNr;
        @jakarta.ws.rs.QueryParam("keyString")
        private String keyString;
        @jakarta.ws.rs.QueryParam("activeFlag")
        private Boolean activeFlag;
        @jakarta.ws.rs.QueryParam("isCustomFlag")
        private Boolean isCustomFlag;
        @jakarta.ws.rs.QueryParam("addTime")
        private OffsetDateTime addTime;
        @jakarta.ws.rs.QueryParam("updateTime")
        private OffsetDateTime updateTime;

        /**
        * The ID of the activity type
        * @return id
        **/
        @JsonProperty("id")
        public Integer getId() {
            return id;
        }

        /**
         * Set id
         **/
        public void setId(Integer id) {
            this.id = id;
        }

        public ActivityTypeQueryParam id(Integer id) {
            this.id = id;
            return this;
        }

        /**
        * The name of the activity type
        * @return name
        **/
        @JsonProperty("name")
        public String getName() {
            return name;
        }

        /**
         * Set name
         **/
        public void setName(String name) {
            this.name = name;
        }

        public ActivityTypeQueryParam name(String name) {
            this.name = name;
            return this;
        }

        /**
        * Icon graphic to use for representing this activity type
        * @return iconKey
        **/
        @JsonProperty("icon_key")
        public IconKeyEnum getIconKey() {
            return iconKey;
        }

        /**
         * Set iconKey
         **/
        public void setIconKey(IconKeyEnum iconKey) {
            this.iconKey = iconKey;
        }

        public ActivityTypeQueryParam iconKey(IconKeyEnum iconKey) {
            this.iconKey = iconKey;
            return this;
        }

        /**
        * A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
        * @return color
        **/
        @JsonProperty("color")
        public String getColor() {
            return color;
        }

        /**
         * Set color
         **/
        public void setColor(String color) {
            this.color = color;
        }

        public ActivityTypeQueryParam color(String color) {
            this.color = color;
            return this;
        }

        /**
        * An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
        * @return orderNr
        **/
        @JsonProperty("order_nr")
        public Integer getOrderNr() {
            return orderNr;
        }

        /**
         * Set orderNr
         **/
        public void setOrderNr(Integer orderNr) {
            this.orderNr = orderNr;
        }

        public ActivityTypeQueryParam orderNr(Integer orderNr) {
            this.orderNr = orderNr;
            return this;
        }

        /**
        * A string that is generated by the API based on the given name of the activity type upon creation
        * @return keyString
        **/
        @JsonProperty("key_string")
        public String getKeyString() {
            return keyString;
        }

        /**
         * Set keyString
         **/
        public void setKeyString(String keyString) {
            this.keyString = keyString;
        }

        public ActivityTypeQueryParam keyString(String keyString) {
            this.keyString = keyString;
            return this;
        }

        /**
        * The active flag of the activity type
        * @return activeFlag
        **/
        @JsonProperty("active_flag")
        public Boolean getActiveFlag() {
            return activeFlag;
        }

        /**
         * Set activeFlag
         **/
        public void setActiveFlag(Boolean activeFlag) {
            this.activeFlag = activeFlag;
        }

        public ActivityTypeQueryParam activeFlag(Boolean activeFlag) {
            this.activeFlag = activeFlag;
            return this;
        }

        /**
        * Whether the activity type is a custom one or not
        * @return isCustomFlag
        **/
        @JsonProperty("is_custom_flag")
        public Boolean getIsCustomFlag() {
            return isCustomFlag;
        }

        /**
         * Set isCustomFlag
         **/
        public void setIsCustomFlag(Boolean isCustomFlag) {
            this.isCustomFlag = isCustomFlag;
        }

        public ActivityTypeQueryParam isCustomFlag(Boolean isCustomFlag) {
            this.isCustomFlag = isCustomFlag;
            return this;
        }

        /**
        * The creation time of the activity type
        * @return addTime
        **/
        @JsonProperty("add_time")
        public OffsetDateTime getAddTime() {
            return addTime;
        }

        /**
         * Set addTime
         **/
        public void setAddTime(OffsetDateTime addTime) {
            this.addTime = addTime;
        }

        public ActivityTypeQueryParam addTime(OffsetDateTime addTime) {
            this.addTime = addTime;
            return this;
        }

        /**
        * The update time of the activity type
        * @return updateTime
        **/
        @JsonProperty("update_time")
        public OffsetDateTime getUpdateTime() {
            return updateTime;
        }

        /**
         * Set updateTime
         **/
        public void setUpdateTime(OffsetDateTime updateTime) {
            this.updateTime = updateTime;
        }

        public ActivityTypeQueryParam updateTime(OffsetDateTime updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        /**
         * Create a string representation of this pojo.
         **/
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("class ActivityTypeQueryParam {\n");

            sb.append("    id: ").append(toIndentedString(id)).append("\n");
            sb.append("    name: ").append(toIndentedString(name)).append("\n");
            sb.append("    iconKey: ").append(toIndentedString(iconKey)).append("\n");
            sb.append("    color: ").append(toIndentedString(color)).append("\n");
            sb.append("    orderNr: ").append(toIndentedString(orderNr)).append("\n");
            sb.append("    keyString: ").append(toIndentedString(keyString)).append("\n");
            sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
            sb.append("    isCustomFlag: ").append(toIndentedString(isCustomFlag)).append("\n");
            sb.append("    addTime: ").append(toIndentedString(addTime)).append("\n");
            sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
            sb.append("}");
            return sb.toString();
        }

        /**
         * Convert the given object to string with each line indented by 4 spaces
         * (except the first line).
         */
        private static String toIndentedString(Object o) {
            if (o == null) {
                return "null";
            }
            return o.toString().replace("\n", "\n    ");
        }
    }}
