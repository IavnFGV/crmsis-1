import importlib.util
import inspect
import os
import sys

# === –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –ª–µ–∂–∏—Ç runner) –≤ sys.path ===
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

def load_module_from_file(file_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ .py —Ñ–∞–π–ª–∞"""
    module_name = os.path.splitext(os.path.basename(file_path))[0]
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    if spec is None or spec.loader is None:
        raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ {file_path}")
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module

def list_functions(module):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è"""
    return [
        (name, func) for name, func in inspect.getmembers(module, inspect.isfunction)
        if func.__module__ == module.__name__
    ]

def prompt_for_arguments(func):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    sig = inspect.signature(func)
    args = []
    kwargs = {}
    print(f"\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}:")
    for name, param in sig.parameters.items():
        raw = input(f"  {name} ({param.annotation if param.annotation != inspect.Parameter.empty else 'any'}): ")
        value = eval(raw) if raw.strip() else None
        if param.kind in (inspect.Parameter.POSITIONAL_ONLY, inspect.Parameter.POSITIONAL_OR_KEYWORD):
            args.append(value)
        else:
            kwargs[name] = value
    return args, kwargs

def run_interactive(file_path: str):
    if not os.path.isfile(file_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    module = load_module_from_file(file_path)
    functions = list_functions(module)

    if not functions:
        print("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    while True:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        for i, (name, _) in enumerate(functions, 1):
            print(f"{i}. {name}")

        try:
            index = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ (0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): "))
            if index == 0:
                print("–í—ã—Ö–æ–¥.")
                break
            if not (1 <= index <= len(functions)):
                raise ValueError()
        except ValueError:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
            continue

        name, func = functions[index - 1]
        args, kwargs = prompt_for_arguments(func)
        try:
            result = func(*args, **kwargs)
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {name}: {result}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

        print("\n---")

def main():
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    else:
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ .py —Ñ–∞–π–ª—É: ").strip()
    run_interactive(file_path)

if __name__ == "__main__":
    main()
