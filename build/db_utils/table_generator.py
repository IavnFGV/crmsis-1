import re
import json
from sqlalchemy import create_engine, text
from db_utils.table_generator_connection import db_config

def transliterate(name: str) -> str:
    table = {
        '–ê':'A','–ë':'B','–í':'V','–ì':'G','–î':'D','–ï':'E','–Å':'E','–ñ':'Zh','–ó':'Z','–ò':'I','–ô':'Y','–ö':'K',
        '–õ':'L','–ú':'M','–ù':'N','–û':'O','–ü':'P','–†':'R','–°':'S','–¢':'T','–£':'U','–§':'F','–•':'Kh','–¶':'Ts',
        '–ß':'Ch','–®':'Sh','–©':'Shch','–´':'Y','–≠':'E','–Æ':'Yu','–Ø':'Ya','–¨':'','–™':'',
        '–∞':'a','–±':'b','–≤':'v','–≥':'g','–¥':'d','–µ':'e','—ë':'e','–∂':'zh','–∑':'z','–∏':'i','–π':'y','–∫':'k',
        '–ª':'l','–º':'m','–Ω':'n','–æ':'o','–ø':'p','—Ä':'r','—Å':'s','—Ç':'t','—É':'u','—Ñ':'f','—Ö':'kh','—Ü':'ts',
        '—á':'ch','—à':'sh','—â':'shch','—ã':'y','—ç':'e','—é':'yu','—è':'ya','—å':'','—ä':'',
        '–Ñ': 'Ye', '–Ü': 'I', '–á': 'Yi', '“ê': 'G', '—î': 'ye', '—ñ': 'i', '—ó': 'yi', '“ë': 'g',
    }
    cleaned = re.sub(r'\s+', '_', name.strip())
    transliterated = ''.join(table.get(c, c) for c in cleaned)
    return re.sub(r'[^a-zA-Z0-9_]', '_', transliterated)


DATABASE_URL = f"mysql+mysqlconnector://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['database']}"
engine = create_engine(DATABASE_URL)

lines = ["SELECT"]

with engine.connect() as conn:
    deal_columns = [row[0] for row in conn.execute(text("""
        SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = 'SB_PD_OKACADEMY' AND TABLE_NAME = 'DEALS'
    """)).fetchall()]

    ref_fields = conn.execute(text("""
        SELECT KEY_PIPEDRIVE, NAME_PIPEDRIVE, FIELD_TYPE, OPTIONS
        FROM REF_DEAL_FIELDS
        WHERE KEY_PIPEDRIVE IS NOT NULL
    """)).fetchall()

    ref_map = {}       # key ‚Üí (alias, type)
    options_map = {}   # key ‚Üí {id: label}

    for key, name, field_type, options_json in ref_fields:
        alias = transliterate(name)
        ref_map[key] = (alias, field_type)
        if options_json and options_json.strip() != "[]":
            try:
                parsed = json.loads(options_json)
                options_map[key] = {str(o["id"]): o["label"] for o in parsed if "id" in o and "label" in o}
            except json.JSONDecodeError:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å OPTIONS –¥–ª—è {key}")


extracted_fields = []
for col in deal_columns:
    alias_entry = ref_map.get(col) or ref_map.get(col.lower())
    alias = alias_entry[0] if alias_entry else col
    ref_map.pop(col, None)
    ref_map.pop(col.lower(), None)
    # üí° MAX –¥–∞–∂–µ –¥–ª—è –ø–æ–ª–µ–π –∏–∑ DEALS
    extracted_fields.append((col, alias, f"    MAX(d.`{col}`) AS `{alias}`,"))

for key, (alias, field_type) in ref_map.items():
    if key in options_map:
        options = options_map[key]
        if field_type == "set":
            expr = "dc.STRING_VALUE"
            for raw_id, label in options.items():
                label_clean = label.replace("'", "''")
                expr = f"REPLACE({expr}, '{raw_id}', '{label_clean}')"
            sql_expr = f"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '{key}' THEN {expr} ELSE NULL END AS CHAR)) AS `{alias}`,"
        elif field_type == "enum":
            case_parts = []
            for val, label in options.items():
                label_clean = label.replace("'", "''")
                case_parts.append(f"WHEN dc.STRING_VALUE = '{val}' THEN '{label_clean}'")
            case_block = "CASE " + " ".join(case_parts) + " ELSE dc.STRING_VALUE END"
            sql_expr = f"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '{key}' THEN {case_block} ELSE NULL END AS CHAR)) AS `{alias}`,"
        else:
            sql_expr = f"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '{key}' THEN dc.STRING_VALUE ELSE NULL END AS CHAR)) AS `{alias}`,"
    else:
        sql_expr = f"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '{key}' THEN dc.STRING_VALUE ELSE NULL END AS CHAR)) AS `{alias}`,"
    extracted_fields.append((key, alias, sql_expr))

extracted_fields = sorted(extracted_fields, key=lambda x: x[1])
lines += [tpl for _, _, tpl in extracted_fields]

# –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
if lines[-1].strip().endswith(','):
    lines[-1] = lines[-1].rstrip(',')

# üßæ FROM + JOIN + GROUP BY –ø–æ d.SOURCE_REQUEST_ID
lines.append("""
FROM SB_PD_OKACADEMY.DEALS d
LEFT JOIN SB_PD_OKACADEMY.DEAL_CUSTOM_FIELDS dc
  ON dc.MAIN_ENTITY_PIPEDRIVE_ID = d.ID_PIPEDRIVE
 AND (
      dc.SOURCE_REQUEST_ID = d.SOURCE_REQUEST_ID
   OR (dc.SOURCE_REQUEST_ID IS NULL AND d.SOURCE_REQUEST_ID IS NULL)
)
GROUP BY d.SOURCE_REQUEST_ID;
""")

sql = "\n".join(lines)
with open("deals_view_materialized.sql", "w", encoding="utf-8") as f:
    f.write(sql)