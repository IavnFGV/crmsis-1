from sqlalchemy import create_engine, text
from sqlalchemy.engine import Result
import re

# üî§ –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
def transliterate(name: str) -> str:
    table = {
        # –†—É—Å—Å–∫–∏–π
        '–ê':'A','–ë':'B','–í':'V','–ì':'G','–î':'D','–ï':'E','–Å':'E','–ñ':'Zh','–ó':'Z','–ò':'I','–ô':'Y','–ö':'K',
        '–õ':'L','–ú':'M','–ù':'N','–û':'O','–ü':'P','–†':'R','–°':'S','–¢':'T','–£':'U','–§':'F','–•':'Kh','–¶':'Ts',
        '–ß':'Ch','–®':'Sh','–©':'Shch','–´':'Y','–≠':'E','–Æ':'Yu','–Ø':'Ya','–¨':'','–™':'',
        '–∞':'a','–±':'b','–≤':'v','–≥':'g','–¥':'d','–µ':'e','—ë':'e','–∂':'zh','–∑':'z','–∏':'i','–π':'y','–∫':'k',
        '–ª':'l','–º':'m','–Ω':'n','–æ':'o','–ø':'p','—Ä':'r','—Å':'s','—Ç':'t','—É':'u','—Ñ':'f','—Ö':'kh','—Ü':'ts',
        '—á':'ch','—à':'sh','—â':'shch','—ã':'y','—ç':'e','—é':'yu','—è':'ya','—å':'','—ä':'',

        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        '–Ñ': 'Ye', '–Ü': 'I', '–á': 'Yi', '“ê': 'G',
        '—î': 'ye', '—ñ': 'i', '—ó': 'yi', '“ë': 'g',
    }

    # 1. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –æ–¥–∏–Ω _
    cleaned = re.sub(r'\s+', '_', name.strip())

    # 2. –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    transliterated = ''.join(table.get(c, c) for c in cleaned)

    # 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    return re.sub(r'[^a-zA-Z0-9_]', '_', transliterated)



lines = ["SELECT"]


with engine.connect() as conn:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ DEALS
    deal_columns = conn.execute(text("""
        SELECT COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = 'SB_PD_OKACADEMY' AND TABLE_NAME = 'DEALS'
    """)).fetchall()
    deal_columns = [row[0] for row in deal_columns]

    # –ú–∞–ø–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
    ref_fields = conn.execute(text("""
        SELECT KEY_PIPEDRIVE, NAME_PIPEDRIVE
        FROM REF_DEAL_FIELDS
        WHERE KEY_PIPEDRIVE IS NOT NULL
    """)).fetchall()
    ref_map = {key: transliterate(name) for key, name in ref_fields}

extracted_fields =[];

# –î–æ–±–∞–≤–ª—è–µ–º d.* –∫–æ–ª–æ–Ω–∫–∏ —Å –∞–ª–∏–∞—Å–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ ref_map)
for col in deal_columns:
    k =col;
    alias = ref_map.get(k)
    if not alias:
        k=col.lower()
        alias = ref_map.get(k)
    if alias and alias != col:
        ref_map.pop(k)
        extracted_fields.append((col, alias,"    d.`$col` AS `$alias`,"))
    else:
        extracted_fields.append((col, col,"    d.`$col` AS `$alias`,"))

        # lines.append(f"    d.`{col}` AS `{alias}`,")
        # lines.append(f"    d.`{col}`,")
        #
        # lines.append(
        #  f"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '{key}' THEN dc.STRING_VALUE ELSE NULL END AS CHAR)) AS `{alias}`,")




# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
for key, alias in ref_map.items():
    extracted_fields.append((key,alias,"    MAX(CAST(CASE WHEN dc.PIPEDRIVE_KEY = '$col' THEN dc.STRING_VALUE ELSE NULL END AS CHAR)) AS `$alias`,"))

extracted_fields = sorted(extracted_fields,key=lambda x:x[1])

for col,alias,template in extracted_fields:
    lines.append(template.replace("$alias", alias).replace("$col", col))


if lines[-1].strip().endswith(','):
    lines[-1] = lines[-1].rstrip(',')

lines.append("""
FROM SB_PD_OKACADEMY.DEALS d
LEFT JOIN SB_PD_OKACADEMY.DEAL_CUSTOM_FIELDS dc
  ON dc.MAIN_ENTITY_PIPEDRIVE_ID = d.ID_PIPEDRIVE
 AND (
      dc.SOURCE_REQUEST_ID = d.SOURCE_REQUEST_ID
   OR (dc.SOURCE_REQUEST_ID IS NULL AND d.SOURCE_REQUEST_ID IS NULL)
 )
GROUP BY d.ID;
""")


sql = "\n".join(lines)
print("\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å:\n")
print(sql)

with open("deals_view_materialized.sql", "w", encoding="utf-8") as f:
    f.write(sql)
print("\nüíæ SQL –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª: deals_view_materialized.sql")